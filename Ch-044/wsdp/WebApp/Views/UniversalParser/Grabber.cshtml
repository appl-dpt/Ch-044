@model Model.DTO.GrabberSettingsDTO
@{
	ViewBag.Title = "Grabber";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/Content/Grabber")
<div class="container-fluid">
	<div class="row">
		<div class="col-sm-12">
			@Html.Partial("HeaderPartialView")
		</div>
	</div>
	<br />
	<div class="row">
		<div class="col-md-8">
			<div class="row">
				<div class="col-sm-12" id="iframe">
					<iframe id="iframe1" src="@TempData.Peek("CurrentPage")" style="width:100%; height:600px;"></iframe>
					<button type="button" value="Previous" class="btn btn-default col-md-2 col-sm-2 col-xs-2 center-block" id="Previous">Previous</button>
					<button type="button" value="Next" class="btn btn-default col-md-2 col-sm-2 col-sm-push-8 col-xs-2 col-md-push-8  col-xs-push-8 center-block" id="Next">Next</button>
				</div>
			</div>
		</div>
		<div class="hide" id="items" data-list-items="@Model.urlJsonData"></div>
		<div class="col-md-4">
			<form class="form-horizontal" action="/UniversalParser/Grabber" method="post">
				<input type="hidden" name="id" value="@Model.Id" />
				<div class="col-sm-12">
					<div class="row">
						<div class="scrollDiv">
							<div class="form-group">
								<div class="fields">
									@Html.LabelFor(t => Model.Name)
									@if (Model.Name == null) {
										@Html.TextBoxFor(m => m.Name, null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
										<br />
										<b class="text-danger"></b>
									} else {
										for (var i = 0; i < Model.Name.Count; i++) {
											@Html.TextBoxFor(m => m.Name[i], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
											<br />
											<b class="text-danger"></b>
										}
									}
								</div>
								<button type="button" id="add_field" class="btn btn-primary btn-xs" style="margin-top:10px;" onclick="AddField(this);">Add field</button>
							</div>
							<div class="form-group">
								<div class="fields">
									@Html.LabelFor(t => Model.Price)
									@if (Model.Price == null) {
										@Html.TextBoxFor(m => m.Price, null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
										<br />
										<b class="text-danger"></b>
									} else {
										for (var i = 0; i < Model.Price.Count; i++) {
											@Html.TextBoxFor(m => m.Price[i], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
											<br />
											<b class="text-danger"></b>
										}
									}
								</div>
								<button type="button" id="add_field" class="btn btn-primary btn-xs" style="margin-top:10px;" onclick="AddField(this);">Add field</button>
							</div>
							<div class="form-group">
								<div class="fields">
									@Html.LabelFor(t => Model.OldPrice)
									@if (Model.OldPrice == null) {
										@Html.TextBoxFor(m => m.OldPrice[0], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
										<br />
										<b class="text-danger"></b>
									} else {
										for (var i = 0; i < Model.OldPrice.Count; i++) {
											@Html.TextBoxFor(m => m.OldPrice[i], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
											<br />
											<b class="text-danger"></b>
										}
									}
								</div>
								<button type="button" id="add_field" class="btn btn-primary btn-xs" style="margin-top:10px;" onclick="AddField(this);">Add field</button>
							</div>
							<div class="form-group">
								<div class="fields">
									@Html.LabelFor(t => Model.ImgLink)
									@if (Model.ImgLink == null) {
										@Html.TextBoxFor(m => m.ImgLink[0], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
										<br />
										<b class="text-danger"></b>
									} else {
										for (var i = 0; i < Model.ImgLink.Count; i++) {
											@Html.TextBoxFor(m => m.ImgLink[i], null, new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
											<br />
											<b class="text-danger"></b>
										}
									}
								</div>
								<button type="button" id="add_field" class="btn btn-primary btn-xs" style="margin-top:10px;" onclick="AddField(this);">Add field</button>
							</div>
							@for (int index = 0; index < Model.PropertyItems.Count; index++) {
								<div class="form-group">
									<div class="fields">
										@Html.Label(Model.PropertyItems[index].Name)
										@Html.HiddenFor(t => Model.PropertyItems[index].Name)
										@Html.HiddenFor(t => Model.PropertyItems[index].Id)
										@if (Model.PropertyItems[index].Value == null) {
											@Html.TextBoxFor(t => Model.PropertyItems[index].Value[0], new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" })
											<br />
											<b class="text-danger"></b>
										} else {
											for (int i = 0; i < Model.PropertyItems[index].Value.Count; i++) {
												@Html.TextBoxFor(t => Model.PropertyItems[index].Value[i], new { @class = "form-control inputfield", @placeholder = "Click here and get Xpath", required = "required" });
												<br />
												<b class="text-danger"></b>
											}
										}
									</div>
									<button type="button" id="add_field" class="btn btn-primary btn-xs" style="margin-top:10px;" onclick="AddField(this);">Add field</button>
								</div>
							}
						</div>
						<div class="form-group">
							<div class="col-sm-3">
								<span onclick="GetAllXpath();" class="btn btn-default">Preview</span>

							</div>
							<div class="col-sm-3 col-sm-push-7">
								<button type="submit" class="btn btn-default ">Done</button>
							</div>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/Scripts/GrabberJs")
